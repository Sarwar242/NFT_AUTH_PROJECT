@page "/designation"

@inject NavigationManager NavManager
@inject HttpClient _http

<PageTitle>Designations</PageTitle>

<div class="row">
    <div class="col">
        <h3 class="gradient-background rounded text-white px-3">Add Designation</h3>
    </div>

</div>

<EditForm Model="Model" OnValidSubmit="Submit" class="form-control d-flex align-items-center" FormName="customer-form">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <label class="pe-1">
        Designation Name: &nbsp;
        <InputText @bind-Value="Model!.Designation_Name" />
    </label>
        <label class="pe-1">
        Designation Priority: &nbsp;
        <InputText @bind-Value="Model!.Designation_Priority" />
    </label>

    <button type="submit" class="btn btn-sm btn-outline-success me-1">Submit</button>
    <button type="button" class="btn btn-outline-secondary btn-sm" @onclick="Back">Home</button>
</EditForm>

<br />
<div class="row pt-3">
    <div class="col">
        <h3 class="gradient-background rounded text-white px-3">Designations</h3>
    </div>

</div>

@if (designations == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th scope="col">Designation Id</th>
                <th scope ="col">Designation Name</th>
                <th scope="col">Designation Priority</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var designation in designations!)
            {
                <tr>
                    <td scope ="row">@designation.Designation_Id</td>
                    <td>@designation.Designation_Name</td>
                    <td>@designation.Designation_Priority</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    [SupplyParameterFromForm]
    public DesignationModel? Model { get; set; }
    private List<DesignationModel>? designations;
    protected override void OnInitialized() => Model ??= new();

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(500);
        designations = await _http.GetFromJsonAsync<List<DesignationModel>>("api/Designation");
    }

    private async Task Submit()
    {
        try
        {
            var responce = await _http.PostAsJsonAsync("api/Designation", Model);
            var err_msg = await responce.Content.ReadAsStringAsync();

            if (err_msg == "null" || string.IsNullOrEmpty(err_msg))
            {
                NavManager.NavigateTo("/designation", true);
            }
            else
            {
                Console.WriteLine(err_msg);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred: {ex.Message}");
        }
    }

    public void Back()
    {
        NavManager.NavigateTo("/", true);
    }
}